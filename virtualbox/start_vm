#!/bin/bash
# vim: ts=4:sw=4

[ ! -t 0 ] && PLELIB_OUTPUT=DISABLE || true
. ~/plescripts/plelib.sh
. ~/plescripts/virtualbox/vboxlib.sh
. ~/plescripts/usagelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset	-r	ME=$0
typeset	-r	PARAMS="$*"

typeset		server=undef
typeset		wait_os=yes
typeset		lsvms=yes
typeset	-i	gap_between_start_sec=${GAP_BETWEEN_START_SEC:-8}
typeset		randomize_start=${RANDOMIZE_START:-yes}
typeset		skip_test_infra=no

if [[ x"$ID_DB" == x || "$ID_DB" == undef ]]
then
	add_usage "-server=name|name"	"Obligatoire \$ID_DB non définie, cf set_db."
else
	add_usage "[-server=name]"		"Si non définie démarre les serveurs correspondants au pattern srv$ID_DB[0-9][0-9]."
fi
add_usage "[-wait_os=$wait_os]"		"yes|no, yes : attend le démarrage complet de l'OS avant de poursuivre."
add_usage "[-lsvms=$lsvms]"			"yes|no, yes : affiche l'état des VM."
add_usage "[-gap_between_start_sec=$gap_between_start_sec]" "Pause in sec between starts of VMs."
add_usage "[-randomize_start=$randomize_start]" "yes|no : yes randomize start order."
add_usage "[-skip_test_infra"		"Ne test pas si $infra_hostname est démarré."

typeset -r str_usage=\
"Usage : $ME
$(print_usage)
"

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			first_args=-emul
			shift
			;;

		-server=*)
			server=${1##*=}
			shift
			;;

		-lsvms=*)
			lsvms=$(to_lower ${1##*=})
			shift
			;;

		-wait_os=*)
			wait_os=${1##*=}
			shift
			;;

		-gap_between_start_sec=*)
			gap_between_start_sec=${1##*=}
			shift
			;;

		-randomize_start=*)
			randomize_start=$(to_lower ${1##*=})
			shift
			;;

		-skip_test_infra)
			skip_test_infra=yes
			shift
			;;

		-dataguard=*)
			warning "Parameter '$1' obsolete."
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			if [ $server == undef ]
			then
				if [[ "${1:0:3}" == srv || "$1" == "$infra_hostname" || "$1" == "$master_hostname" ]]
				then
					# Recherche les serveurs sur le pattern srv ou une des 2
					# VM d'infra.
					server=$1
				elif vm_exists $1
				then
					server=$1
				else
					# Toutes les VM qui correspondront au pattern ci dessous
					# seront démarrées.
					server="srv$1[0-9][0-9]"
				fi
				shift
			else
				error "Arg '$1' invalid."
				LN
				info "$str_usage"
				exit 1
			fi
			;;
	esac
done

if [ $server == undef ]
then
	[[ x"$ID_DB" != x && "$ID_DB" != undef ]] && server="srv$ID_DB[0-9][0-9]" || true
fi
exit_if_param_undef		server	"$str_usage"

exit_if_param_invalid	wait_os			"yes no" "$str_usage"

exit_if_param_invalid	randomize_start	"yes no" "$str_usage"

#	Load to vm_list all server who match $server
#	exit 1 if no server found.
function load_vm_list
{
	typeset	-a	list
	while read vm_name
	do
		[ x"$vm_name" != x ] && list+=( $vm_name ) || true
	done<<<"$(VBoxManage list vms | grep -E "\<$server\>" | cut -d\" -f2)"

	if [ $randomize_start == yes ]
	then
		case ${#list[@]} in
			0)
				exit 1
				;;
			1)
				vm_list=( ${list[*]} )
				;;
			2)	# Concerne les clusters Dataguard ou RAC, permet de démarrer les
				# VMs aléatoirement.
				typeset	-ri rand=$(( RANDOM % 2 ))
				vm_list[0]=${list[$rand]}
				[ $rand -eq 0 ] && vm_list[1]=${list[1]} || vm_list[1]=${list[0]}
				;;
			*)	# Je n'ai pas plus de 2 VMs par cluster, donc ne devrait jamais arriver.
				vm_list=( ${list[*]} )
				;;
		esac
	else
		vm_list=( ${list[*]} )
	fi

	info "${#vm_list[@]} server(s) found for pattern $server : ${vm_list[*]}"
	LN
}

typeset -a vm_list			# Nom de toutes les VMs.
typeset	-a vm_started_list	# Nom des VMs démarrées.

# Lors de la création du serveur d'infra le master peut être redémarré, mais le
# serveur d'infra n'existe pas. Script : 02_install_vm_infra.sh
if [ $skip_test_infra == no ]
then
	if [ $server != $infra_hostname ] && ! vm_running $infra_hostname
	then
		info "Start infra server : $infra_hostname."
		exec_cmd "start_vm $infra_hostname -lsvms=no"
		LN
	fi
fi

#	============================================================================
load_vm_list

#	============================================================================
#	Démarre les VMs :
for vm in ${vm_list[*]}
do

	if vm_running $vm
	then
		info "$vm is running."
		LN
		continue
	fi

	exec_cmd -c "VBoxManage startvm $vm --type headless"
	if [ $? -eq 0 ]
	then
		if [[ $gap_between_start_sec -ne 0 && $vm != ${vm_list[ ${#vm_list[*]}-1 ]} ]]
		then
			# Atténue les erreurs sur eth1 (priv iscsi) et évite de saturer les CPU.
			timing $gap_between_start_sec
		fi
		vm_started_list+=( $vm )
	else
		error "Failed to start $vm"
	fi
	LN
done

#	============================================================================
if [[ $EXEC_CMD_ACTION == EXEC && $wait_os == yes && ${#vm_started_list[*]} -ne 0 ]]
then
	line_separator
	for vm in ${vm_started_list[*]}
	do
		exec_cmd wait_server $vm
		LN
	done
fi

#	============================================================================
if [[ $PLELIB_OUTPUT != DISABLE && $lsvms == yes ]]
then
	line_separator
	exec_cmd "lsvms"
fi

#	============================================================================
if [ ${#vm_started_list[@]} -eq ${#vm_list[@]} ]
then
	exit 0	# Toutes les VMs ont démarrés.
else
	exit 1	# Au moins une VM n'a pas démarré.
fi
