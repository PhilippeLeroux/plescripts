set ts=4
set sw=4
set softtabstop=4	" aka sts ne fonctionne pas avec vi
set listchars=tab:→\ ,eol:$,trail:✗,nbsp:⋅
"set listchars=tab:→\ ,eol:$,space:.,trail:✗,nbsp:⋅
"set cc=81 wrap
"set nu
set vb t_vb=
set noerrorbells

if  ! has("compatible")
"	A partir d'ici la configuration n'est pas compatible avec vi.

" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
" Le répertoire du fichier en cour d'édition devient le répertoire courant.
" git ne fonctionne plus avec :
" autocmd BufEnter * silent! lcd %:p:h

"	============================================================================
"	Pathogen
"	Doit être appelé au début.
"	============================================================================
let g:pathogen_disabled = []
if v:version <= 704
	call add(g:pathogen_disabled, 'vim-Grammalecte')
endif

call pathogen#infect()
call pathogen#helptags()

"	============================================================================
set history=10000

"	============================================================================
if ! exists( "g:first_load" )
	" Permet d'éviter certaines actions sur
	" un rechargement du fichier
	let g:first_load=1
else
	let g:first_load=0
endif

"	============================================================================
set modeline

"	============================================================================
if match( getcwd(), $HOME.'/plewiki.*' ) == 0
	let plewiki_directory='yes'
else
	let plewiki_directory='no'
endif

"	============================================================================
if g:first_load == 1
	if has("gui_running")
		set columns=115
		set lines=49
		if plewiki_directory == 'yes'
			winpos 847 36	" Positionne la fenêtre à droite de l'écran
		else
			winpos 0 36		" Positionne la fenêtre à gauche de l'écran
		endif
	endif
endif

"	============================================================================
"	Pour vim-instant-markdown
"	============================================================================
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_toc_autofit = 1
set conceallevel=2

"	============================================================================
"	Pour vim-markdown
"	============================================================================
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

"	============================================================================
"	Pour mes fichiers template et .md je désactive la syntaxe
"	============================================================================
autocmd BufRead *.template,*.doc.sh,*.md set syn=off

"	Activé pour le plugin markdown
syntax enable
filetype plugin indent on

"	============================================================================
"	Change the mapleader from \ to ,
let mapleader=","
let maplocalleader=","

"	============================================================================
"	Recharge automatiquement les fichiers modifiés.
set autoread

"	============================================================================
"   Ne charge pas le driver noshowmatch qui est trop lent.
let loaded_matchparen = 1

"	============================================================================
"	Pour que airline soit visible tout le temps
set laststatus=2

"	============================================================================
"	Search
set hlsearch
set incsearch

"	============================================================================
"	Don't redraw while executing macros (good performance config)
set lazyredraw

"	============================================================================
"	For regular expressions turn magic on
set magic

"	============================================================================
"	Syntastic : configuration conseillé
"	============================================================================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" Ne fonctionne pas avec Airline :(
set statusline+=%{&spelllang}

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

autocmd BufRead *.template,*.doc.sh let g:syntastic_check_on_open = 0

"	============================================================================
"	Sauver la position du curseur
"	http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
"	Sous windows il faut une adaptation
"	'100,<50,s10,h
"	============================================================================
set viminfo='10,\"100,:20,%,n~/.viminfo
function! RestoreCursor()
	if line("'\"") <= line("$")
		normal! g`"
		return 1
	endif
endfunction

augroup restoreCursor
	autocmd!
	autocmd BufWinEnter * call RestoreCursor()
augroup END

"	============================================================================
"	toggle between terminal and vim mouse
"	============================================================================
if ! has("gui_running")
	noremap <silent><F12> :let &mouse=(&mouse == "a"?"":"a")<CR>:call ShowMouseMode()<CR>
	function ShowMouseMode()
		if (&mouse == 'a')
			echo "vim handle mouse."
		else
			echo "Terminal handle mouse."
		endif
	endfunction
endif

"	============================================================================
source $HOME/vimfunc/ApplyConfigOnFileType.vim
autocmd! BufRead * call ApplyConfigOnFileType()

"	============================================================================
source $HOME/vimfunc/Dictionnaires.vim
nnoremap <F2> :call FrDictionnaire()<CR>
nnoremap <F4> :call USDictionnaire()<CR>

"	============================================================================
if v:version > 704
	source $HOME/vimfunc/FrGrammalecte.vim
	nnoremap <C-g> :call FrGrammalecte()<CR>
else
	source $HOME/vimfunc/FrGrammaire.vim
	nnoremap <C-g> :call FrGrammaire()<CR>
endif

"	============================================================================
source $HOME/vimfunc/folding.vim
"	Permet de (un)folder la fonction courante avec la touche space.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

map <F3> :call ToggleAllFolders()<CR>
autocmd BufRead * call EnableShellFoldBrace()

"	============================================================================
source $HOME/vimfunc/GotoDir.vim
nnoremap <silent> <C-o> :call Goto_oracle_bash_completion()<CR>
nnoremap <silent> <C-e> :call Goto_plescripts()<CR>
nnoremap <silent> <C-h> :call Goto_home()<CR>

"	============================================================================
"	vim-session & vim-misc
"	============================================================================
function! LoadSession()
	if exists( 'g:sessionLoaded' )
		return
	endif
	let g:sessionLoaded='yes'
	if has("gui_running")
		" Si la session 'plescripts' n'existe pas elle est choisie par défaut.
		let l:lock=expand( g:session_directory . '/plescripts.vim.lock' )
		if ! filereadable( lock )
			let g:session_default_name='plescripts'		"	Une session pour plescripts
		else
			let g:session_default_name='gui'			"	Une session générale pour gvim
		endif
	else
		let g:session_default_name='terminal'			"	Une session générale pour vim
	endif
endfunction

autocmd bufenter * call LoadSession()

let g:session_autoload='yes'
let g:session_autosave='yes'

"	Workaround bug vim ou commande NERDTree ?
"	La commande autocmd bufenter * if (winnr("$") == 1 [skipped] | q | endif
"	fait planter le plugin vim-session et certainnement tous les autres qui
"	comme lui enregistre des fonctions devant s'exécuter quand vim se termine.
"	La fonction n'est plus utilisée, je la garde pour mémoire du bug.
"	Maintenant j'utilise 'qa' pour quitter.
"function! RemoveSessionLock()
"	let l:lock=expand( g:session_directory . '/' . g:session_default_name . '.vim.lock' )
"	call delete(lock)
"endfunction

"	Commenter, avec cette version de vim fonctionne très mal.
"	J'utilise 'qa' pour quitter et ma session est sauvée.
"	Si NERDTree est la dernière fenêtre supprime le lock et quitte.
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | call RemoveSessionLock() | qa | endif

"	Workaround :
"	Si une session avec un nom différent existe et que la session courante n'a
"	pas encore de fichier de session, alors il n'est jamais crée.
function! SaveSessionIfNotExists()
	let l:curfilename=expand('%:t')
	if l:curfilename !~ "NERD_tree*" && l:curfilename != ''
		let l:file=expand( g:session_directory . '/' . g:session_default_name . '.vim' )
		if ! filereadable( file )
			SaveSession
		endif
	endif
endfunction

autocmd bufenter * call SaveSessionIfNotExists()

"	============================================================================
"	NERDTree
"	============================================================================
let NERDTreeIgnore=['\.swp$', '\~$']

if has( "gui_running" )
	let b:fileext=expand( '%:e' )
	if plewiki_directory == 'no' && b:fileext != 'txt' && b:fileext != 'log'
		" NERDTree ouvert automatiquement
		autocmd VimEnter * NERDTree %:p:h
	endif
else
	" NERDTree ouvert si aucun fichier n'est passé en paramètre.
	autocmd StdinReadPre * let s:std_in=1
	autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree %:p:h | endif
endif
map <silent> <F5> :NERDTreeToggle<CR>

" Go to previous (last accessed) window.
autocmd VimEnter * wincmd p

"	============================================================================
"	clean_log
"	============================================================================
source $HOME/vimfunc/CleanLog.vim
autocmd BufRead * call CleanLog()
nnoremap <silent> <F8> :call CleanLog()<CR>

"	============================================================================
"	Tips
"	============================================================================
source $HOME/vimfunc/ToggleVimTips.vim
nnoremap <silent> <F9> :call ToggleVimTips()<CR>

"	============================================================================
"	Recharger .vimrc
"	============================================================================
map <F10> :so $MYVIMRC<CR>

"	============================================================================
"	Permet de ce déplacer d'une modification à l'autre.
"	============================================================================
nnoremap <silent> <C-p> :GitGutterPrevHunk<CR>
nnoremap <silent> <C-n> :GitGutterNextHunk<CR>

"	============================================================================
"	Fait un man du mot sous le curseur.
"	============================================================================
source $HOME/vimfunc/ManWordUnderTheCursor.vim
nnoremap <silent> <C-m> :call ManWordUnderTheCursor()<CR>

"	============================================================================
"	TOC markdown
"	============================================================================
function! TocMarkdown()
	call system('gh-md-toc ' . shellescape(bufname("%")) . " >/tmp/toc.md")
	set previewheight=15
	pedit! /tmp/toc.md
endfunction
nnoremap <silent> <C-t> :call TocMarkdown()<CR>

"	============================================================================
"	Recherche de la fonction correspondante ou mot sous le curseur.
source $HOME/vimfunc/SearchFunction.vim
nnoremap <leader>f :call SearchFunction()<CR>

"	============================================================================
"	Positionné après Pathogen pour que les pluggins 'colorscheme' soient chargés.
source $HOME/vimfunc/ToggleColorscheme.vim
map <silent> <F6> :call ToggleColorscheme()<CR>


"	============================================================================
"	Touche leader : raccourcies sur des commandes.
nnoremap <leader>h :noh<CR>

endif "!has("compatible")
