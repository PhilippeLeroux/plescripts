#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/usagelib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset -r ME=$0
typeset -r PARAMS="$*"

typeset		defrag=no
typeset	-i	max_ext=40
typeset -i	skip_gt=0

add_usage "[-defrag]"				"Lance la réorganisation si elle est nécessaire."
add_usage "[-max_ext=$max_ext]"		"Nombre d'extents maximum par disque."
add_usage "[-skip_gt=$skip_gt]"		"Ne pas défragmenter les fichiers de plus de #extents."

typeset -r str_usage=\
"Usage :
$ME
$(print_usage)
"

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			shift
			;;

		-defrag)
			defrag=yes
			shift
			;;

		-max_ext=*)
			max_ext=${1##*=}
			shift
			;;

		-skip_gt=*)
			skip_gt=${1##*=}
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			error "Arg '$1' invalid."
			LN
			info "$str_usage"
			exit 1
			;;
	esac
done

# $1 file.
# return 0 if #extends less than max_ext, else return 1
function file_nr_extends_ok
{
	typeset -r	vdi_file=$1

	typeset -ri nr_extents=$(sudo xfs_bmap "$vdi_file" | tail -1 | tr -s [:space:] | cut -d: -f1)+1
	count_total_ext=count_total_ext+nr_extents

	typeset -r	file_size=$(fmt_bytes_2_better $(stat --printf="%s" "$vdi_file"))
	typeset	-r	msg=$(printf "%-21s %8s : %2d extents " "${vdi_file##*/}" $file_size $nr_extents)
	if [ $nr_extents -le $max_ext ]
	then
		info "$msg [$OK]"
		return 0
	else
		info "$msg [$KO] limit $max_ext extents, defrag needed..."
		return 1
	fi
}

# $1 file
function defrag_file
{
	typeset	-r	vdi_file="$1"

	info "Démarrage..."
	exec_cmd sudo xfs_fsr -v \"$vdi_file\"
	file_nr_extends_ok "$vdi_file"
	LN
}

function check_all_vdi_files
{
	typeset		sep=no
	typeset	-i	count_vms=0
	typeset	-i	count_vdi_files=0
	typeset	-i	count_total_ext=0

	while read vm_name
	do
		[ $sep == no ] && sep=yes || line_separator

		((++count_vms))
		info "Check files for VM $vm_name :"
		while read vdi_name
		do
			# Arrive lors des snapshots, le .vdi original n'est pas listé,
			# seulement le snapshot.
			[ x"$vdi_name" == x ] && continue || true

			((++count_vdi_files))
			if ! file_nr_extends_ok "$vdi_name"
			then
				if [ $defrag == yes ]
				then
					defrag_file "$vdi_name"
				else
					info "    Détails avec :"
					info "    sudo xfs_bmap -v \"$vdi_name\""
					info ""
					info "    Défragmentation :"
					info "       - sudo xfs_fsr -v \"$vdi_name\""
					info "       - ${ME##*/} -defrag (Tous les fichiers seront défragmentés)"
					LN
				fi
			fi
		done<<<"$(VBoxManage showvminfo $vm_name			|\
						grep -E "^SATA"|grep -v "Snapshot"	|\
						sed "s/.*: \(.*vdi\) .*/\1/g")"
		LN
	done<<<"$(VBoxManage list vms | cut -d\" -f2)"

	info "VM        : $count_vms"
	info -n "vdi files : $count_vdi_files, "
	info -f "average $(compute -l2 "$count_total_ext / $count_vdi_files") extends per file."
	LN
}

if [[ $defrag == yes ]]
then
	LN
	info "La défragmentation sera faite si le fichier vdi a plus de $max_ext extents."
	if [ $skip_gt -ne 0 ]
	then
		info "    - Si le nombre d'extents à défragmenter est inférieur à $skip_gt"
	fi
	LN
fi

check_all_vdi_files
