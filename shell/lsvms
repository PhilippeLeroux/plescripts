#!/bin/bash
# vim: ts=4:sw=4

. ~/plescripts/plelib.sh
. ~/plescripts/vmlib.sh
. ~/plescripts/cfglib.sh
. ~/plescripts/global.cfg
EXEC_CMD_ACTION=EXEC

typeset	-r	ME=$0
typeset	-r	PARAMS="$*"

typeset	-r	str_usage=\
"Usage : $ME"

typeset		db=undef

while [ $# -ne 0 ]
do
	case $1 in
		-emul)
			EXEC_CMD_ACTION=NOP
			shift
			;;

		-h|-help|help)
			info "$str_usage"
			LN
			exit 1
			;;

		*)
			error "Arg '$1' invalid."
			LN
			info "$str_usage"
			exit 1
			;;
	esac
done

# $1 vm name
# $2 [-state] n'utiliser qu'avec les VM desktops.
function print_vm_running_status
{

	if vm_running $1
	then
		info -n -f "${UNDERLINE}$1${NORM}"
	else
		info -n -f "$1"
	fi

	info -n -f " ($(vm_memory_size $1))"

	if [ "$2" == "-state" ]
	then
		read f1 state f3 rem<<<"$(VBoxManage showvminfo $1 | grep -E "^State")"
		case $state in
			saved)
				info -n -f " : saved."
				;;
			powered)
				info -n -f " : powered off."
				;;
		esac
	fi
}

# $1 Oracle Version like 12.2.0.1
function print_oracle_release
{
	typeset -r	v=$1
	typeset	-r	r=$(cut -d. -f1-2<<<"$v")
	case "$r" in
		12.1)
			echo "12cR1 ($v)"
			;;
		12.2)
			echo "12cR2 ($v)"
			;;
		18*)
			echo "18c   ($v)"
			;;
		*)
			warning "$v check function print_oracle_release"
			;;
	esac
}

# $1 dbid
function print_vm_database
{
	typeset -r	dbid=$1

	if ! cfg_exists $dbid use_return_code 1>/dev/null 2>&1
	then
		warning "Configuration not exists for $dbid."
		LN
		return 0
	fi

	typeset	-ri	max_nodes=$(cfg_max_nodes $dbid)

	cfg_load_node_info $dbid 1

	if [ "$dbid" == "$ID_DB" ]
	then
		info "${BOLD}$dbid${NORM} ($cfg_master_name)"
	else
		info "$dbid ($cfg_master_name)"
	fi

	if [ $cfg_db_type == rac ]
	then
		vm_printed_list="$vm_printed_list $cfg_server_name"
		if vm_exists $cfg_server_name
		then
			info -f -n "  $(print_oracle_release $cfg_orarel) RAC       : $(print_vm_running_status $cfg_server_name), "
		else
			info -f -n "  $(print_oracle_release $cfg_orarel) RAC       : server not exist"
		fi
		cfg_load_node_info $dbid 2
		if vm_exists $cfg_server_name
		then
			print_vm_running_status $cfg_server_name
		else
			info -n -f "server not exist"
		fi
		vm_printed_list="$vm_printed_list $cfg_server_name"
	elif [ $cfg_dataguard == yes ]
	then
		vm_printed_list="$vm_printed_list $cfg_server_name"
		if vm_exists $cfg_server_name
		then
			info -f -n "  $(print_oracle_release $cfg_orarel) Dataguard : $(print_vm_running_status $cfg_server_name), "
		else
			info -f -n "  $(print_oracle_release $cfg_orarel) Dataguard : server not exist"
		fi
		cfg_load_node_info $dbid 2
		if vm_exists $cfg_server_name
		then
			print_vm_running_status $cfg_server_name
		else
			info -n -f "server not exist"
		fi
		vm_printed_list="$vm_printed_list $cfg_server_name"
	else
		vm_printed_list="$vm_printed_list $cfg_server_name"
		if vm_exists $cfg_server_name
		then
			info -f -n "  $(print_oracle_release $cfg_orarel) Single    : $(print_vm_running_status $cfg_server_name)"
		else
			info -f -n "  $(print_oracle_release $cfg_orarel) Single    : server not exist"
		fi
	fi
	info -n -f ", $cfg_luns_hosted_by"
	case $cfg_db_type in
		std|rac)
			info -f "/ASM"
			;;

		fs)
			info -f "/FS"
			;;
	esac
	LN
}

# print to stdout all dbid sorted.
# Sort on release, storage (FS/ASM) and database type
function get_ordored_dbid
{
	typeset		fullpath
	typeset		dbid
	while read fullpath
	do
		[ x"$fullpath" == x ] && continue || true
		dbid=${fullpath##*/}
		if cfg_exists $dbid use_return_code 1>/dev/null 2>&1
		then
			cfg_load_node_info $dbid 1
			printf "$cfg_orarel "
			case $cfg_db_type in
				fs)
					if [ $cfg_dataguard == no ]
					then # FS
						printf "1 $dbid\n"
					else # FS Dataguard
						printf "3 $dbid\n"
					fi
					;;
				std)
					if [ $cfg_dataguard == no ]
					then # ASM
						printf "2 $dbid\n"
					else # ASM Dataguard
						printf "4 $dbid\n"
					fi
					;;
				rac)
					printf "8 $dbid\n"
					;;
			esac
		fi
	done<<<"$(find ~/plescripts/database_servers/* -type d)"	\
								| sort -k 1,2 | awk '{ print $3 }'
}

#ple_enable_log -params $PARAMS

typeset	vm_printed_list="$infra_hostname"

info "Database master :"
while read vm_name
do
	if vm_exists $vm_name
	then
		info -n "    - $(print_vm_running_status $vm_name)"
	else
		info -n "    - server not exist for $vm_name"
	fi
	if [ $vm_name == $master_hostname ]
	then
		info -f " ${GREEN}Actif${NORM}"
	else
		info -f " ${ITALIC}Inactif${NORM}"
	fi
	vm_printed_list="$vm_printed_list $vm_name"
done<<<"$(VBoxManage list vms | grep -E "*master*" | cut -d\" -f2)"
LN

# Tester l'existence permet d'éviter des messages d'erreurs lors de la création
# des VM master et d'infra.
if vm_exists $infra_hostname
then
	info "Infrastructure server : $(print_vm_running_status $infra_hostname)"
	LN
fi

line_separator
info "Databases :"
LN

while read dbid
do
	[ x"$dbid" == x ] && continue || print_vm_database $dbid
done<<<"$(get_ordored_dbid)"

# Recherche si d'autres VM exists.
typeset	-i	count=0
while read vm_name
do
	[ x"$vm_name" == x ] && continue || true

	if ! grep -qE "\<$vm_name\>"<<<"$vm_printed_list"
	then
		((++count))
		if [ $count -eq 1 ]
		then
			line_separator
			info "Others VM :"
		fi
		info "$(print_vm_running_status $vm_name -state)"
		LN
	fi
done<<<"$(VBoxManage list vms | cut -d\" -f2)"
